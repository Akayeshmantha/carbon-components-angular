//
// Mixin for Checkbox and Radio
// --------------------------------------------------


@mixin radio-checkbox($type, $el-size, $el-brd-radius , $label-margin, $selected-width,
					  $selected-height, $el-sm-width, $el-sm-height, $el-selected-sm-width,
					  $el-selected-sm-height){
	max-width: 100%;
	height: $el-size;
	position: relative;
	display: block;
	margin-bottom:10px;

	label {
	    display: block;
	    span {
		    height: $el-size;
		    cursor: pointer;
		    display: inline-block;
			position: relative;
			top:0;
			left:0;
		    &:before {
		    	content: '';
			    width: $el-size;
			    margin-right: $label-margin;
			    display: inline-block;
			    height: $el-size;
			    border: 1px solid color("gray", 50);
			    vertical-align: middle;
                border-radius: $el-brd-radius;
		    }
		    &:after {
				content: '';
				width: $selected-width;
				height: $selected-height;
				position: absolute;
				left: ($el-size - $selected-width) / 2;
				border-color: color("blue", 50);
				border-style: solid;
				opacity: 0;
				transition: all 0.2s ease-in;
				@if $type == radio {
					top: ($el-size - $selected-height) / 2;
					border-radius:$el-brd-radius;
					border-width:6px;
				}@else if $type == checkbox{
					top: 5px;
					border-width: 2px;
					border-top: none;
					border-right: none;
					transform: rotate(-45deg);
				}
			}

		    &:hover:before {
				box-shadow: 0px 0px 0px 1px color("white", 0), 0px 0px 0px 2px color("blue", 50);
		    }
		}
	}
	input[type=#{$type}] {
		opacity: 0;
	    min-width: 0;
	    position: absolute;
	    &:checked {
	    	+ span:after {
	    		opacity: 1;
	    	}

		}
		&:focus {
			 + span {
				&:before {
					box-shadow: 0px 0px 0px 1px color("white", 0), 0px 0px 0px 2px color("blue", 50);
				}
			}
		}
		&:disabled {
			+ span {
				color: color("gray", 20);
				cursor: not-allowed;
				&:before {
					border-color: color("gray", 20);
					border-style: dashed;
				}
				&:after {
					border-color: color("gray", 20);
				}
			}
			&:hover {
				 + span {
					&:before {
						box-shadow: none;
					}
				}
			}
		}
		// angular
		&.ng-invalid.ng-touched, &.is-error {
			 + span {
				&:before {
					@include outline-error;
				}
			}
		}
	}
	.size-sm &, &.size-sm {
		height: $el-sm-height;
		label {
			span{
				height: $el-sm-height;
				 &:before {
					 width:$el-sm-width;
					 height:$el-sm-height;
				 }
				 &:after {
					width:$el-selected-sm-width;
					height:$el-selected-sm-height;

					left: 3px;
					@if $type == radio{
						border-width:5px;
						top: 3.5px;
					} @else{
						top:4px;
					}

				 }
			}
		}
		input[type=#{$type}] {
			height:$el-sm-height;
		}
	}
	.theme-blue & {
		label {
			span {
				color: color("white", 0);
				&:before {
					 border-color: color("white", 0);
				}
				&:after {
					border-color: color("white", 0);
				}
				&:hover:before {
					box-shadow: 0px 0px 0px 1px color("blue", 50), 0px 0px 0px 2px color("white", 0);
				}
			}
			input[type=#{$type}] {
				&:focus {
					 + span {
						&:before {
							box-shadow: 0px 0px 0px 1px color("blue", 50), 0px 0px 0px 2px color("white", 0);
						}
					}
				}
				&:disabled {
					& + span {
						color: color("white", 0);
						&:before {
							border-color: color("white", 0);
						}
						&:after {
							border-color: color("white", 0);
						}
					}
				}
			}
		}
	}

	.layout-inline & {
		 display: inline-block;
		 margin-right: 10px
	}

	html[dir=rtl] & {
		label {
			span {
				&:before {
					margin-left: $label-margin;
					margin-right: 0;
				}
				&:after {
					right: ($el-size - $selected-width) / 2;
				}
			}
		}
	}
}
